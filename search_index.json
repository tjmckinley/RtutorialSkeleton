[["index.html", "Skeleton Tutorial Template 1 Opening page 1.1 Additional extensions", " Skeleton Tutorial Template TJ McKinley 1 Opening page Basically a standard Bookdown template with a few tweaks. New chapters need to be in separate ‘.Rmd’ files, where each file starts with a chapter heading as seen here. In order to use the task and solution blocks in , you must input the order of the files into the _bookdown.yml file, and the first file must be called index.Rmd e.g. rmd_files: html: [&#39;index.Rmd&#39;, &#39;ch1.Rmd&#39;] latex: [&#39;index.Rmd&#39;, &#39;ch1.Rmd&#39;, &#39;ch_appendix.Rmd&#39;] output_dir: &quot;docs&quot; The latex: path above must have 'ch_appendix.Rmd' as its last entry. This ensures that the appendix is properly formatted for the solutions to the problems. You must have the following lines at the start of your index.Rmd file (please do not change the chunk options for this chunk, and place it as the first chunk in the document): ```{r, child = &quot;_setup.Rmd&quot;, include = FALSE, purl = FALSE, cache = FALSE} ``` Note: the task / solution and info blocks detailed below cannot be cached. Code chunks within these blocks can be cached as usual. The caching is automatically disabled in order to make sure the PDF outputs are correctly cross-referenced. There are a couple of useful special blocks. A task block, and a solution block. These can be used as e.g. ```{task} Here is a task written in **markdown**. ``` which renders as: Task Here is a task written in markdown. You can include chunks within the task chunk, but you need to use double backticks within the chunk, and leave carriage returns around the internal chunk e.g. ```{task} ``{r} x &lt;- 2 + 2 x `` ``` which renders as: Task x &lt;- 2 + 2 x ## [1] 4 Be careful to have suitable carriage returns around e.g. enumerate or itemize environments inside the chunk also. For example: ```{task} Here is a list: 1. item 1 2. item 2 ``` will not render nicely. But ```{task} Here is a list: 1. item 1 2. item 2 ``` will: Task Here is a list: item 1 item 2 The solution chunk works in the same way, and the numbers will follow the previous task chunk (so you can set tasks without solutions) e.g. ```{task} Add 2 and 2 together ``` ```{solution} ``{r} 2 + 2 `` ``` gives: Task Add 2 and 2 together Show: Solution Solution 2 + 2 ## [1] 4 1.1 Additional extensions 1.1.1 Different task and solution titles Task and solution boxes can also be given different names using the title option e.g. ```{task, title = &quot;Question&quot;} What is the meaning of life, the universe and everything? ``` ```{solution, title = &quot;Answer&quot;} Why 42 of course! ``` gives: Question What is the meaning of life, the universe and everything? Show: Answer Answer Why 42 of course! 1.1.2 Turning tasks and solutions on and off Sometimes you might want to hide task and/or solution boxes. This can be done with the renderTask and renderSol chunk options, which can be set globally or locally. For example: ```{task, title = &quot;Question&quot;} Can I set a task and not show the answer? ``` ```{solution, title = &quot;Answer&quot;, renderSol = FALSE} Indeed, though you won&#39;t see this answer unless `renderSol = TRUE`... ``` typesets as: Question Can I set a task and not show the answer? 1.1.3 Generic information environments You can also set generic boxed environments containing arbitrary information. ```{info, title = &quot;Some interesting titbit&quot;} This box contains invaluable information! ``` typesets as: Show: Some interesting titbit This box contains invaluable information! Note that it is useful to set the title option here, else it defaults to info. You can also use this environment to simply display an alert box with information, by setting the collapsible argument to FALSE in the chunk options e.g. ```{info, title = &quot;Some interesting aside&quot;, collapsible = FALSE} Yet more valuable information - this time displayed directly! ``` typesets as: Some interesting aside Yet more valuable information - this time displayed directly! In the PDF output, setting collapsible = TRUE will place the information boxes in a separate Appendix, with links in the main document. You can again hide the info boxes by setting renderInfo = FALSE in the chunk options. You can also put boxes around text without any titles by setting title = NA and collapsible = FALSE e.g. ```{info, title = NA, collapsible = FALSE} Just some stuff but no titles! ``` Just some stuff but no titles! 1.1.4 Tabbed boxed environments Originally developed to put base R and tidyverse solutions side-by-side, using a multCode = TRUE option to the solution box. Here the two tabs are separated by four consecutive hashes: ####, and the titles option gives the tab titles (these can be set globally if preferred) e.g. ```{task} Filter the `iris` data by `Species == &quot;setosa&quot;` and find the mean `Petal.Length`. ``` ```{solution, multCode = TRUE, titles = c(&quot;Base R&quot;, &quot;tidyverse&quot;)} ``{r} ## base R solution mean(iris$Petal.Length[ iris$Species == &quot;setosa&quot;]) `` #### ``{r} ## tidyverse solution iris %&gt;% filter(Species == &quot;setosa&quot;) %&gt;% select(Petal.Length) %&gt;% summarise(mean = mean(Petal.Length)) `` ``` will typeset to: Task Filter the iris data by Species == \"setosa\" and find the mean Petal.Length. Show: Solution Solution Base R tidyverse ## base R solution mean(iris$Petal.Length[ iris$Species == &quot;setosa&quot;]) ## [1] 1.462 ## tidyverse solution iris %&gt;% filter(Species == &quot;setosa&quot;) %&gt;% select(Petal.Length) %&gt;% summarise(mean = mean(Petal.Length)) ## mean ## 1 1.462 Note that there is also a multCode chunk that does not link to task and solution boxes e.g. ```{multCode} Two options: * Option 1 #### Two options: * Option 2 ``` will typeset to: Option 1 Option 2 Two options: Option 1 Two options: Option 2 The titles option can be set as before. 1.1.5 Resize code chunks Code chunks can be resized using a size, htmlsize or latexsize chunk option. These take either HTML or sizes and convert accordingly. For example, ```{r, size = &quot;scriptsize&quot;} rnorm(10, 0, 1) ``` typesets as: rnorm(10, 0, 1) ## [1] -0.51121340 0.43483137 -0.08709522 0.09293718 0.45191390 -0.54916930 ## [7] 1.59122805 2.18207518 0.41049680 1.79801857 Setting htmlsize or latexsize overwrites the size argument and allows for sizes to be different for HTML or output respectively. This is most useful for multCode chunks that might need shrinking in a environment in order to fit nicely on a page side-by-side. 1.1.6 References References can be added in the usual way e.g. @somepaper:2000 using BibTeX files. Typesets as author (2000). These get added to each chapter 1.1.7 Hypertargets You can link to arbitrary parts of the document by adding hypertarget blocks at the point in the text where you want the target, making sure to set a label argument set to a unique ID tag e.g. I added ```{hypertarget, label = &quot;idtag&quot;} ``` just before the interesting aside earlier, and then you can use e.g. [click to go to target](#idtag) in the text as follows: click to go to target. References author, Some. 2000. “Some Title.” Some Journal 1: 1–20. "],["references-1.html", "References", " References author, Some. 2000. “Some Title.” Some Journal 1: 1–20. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
